// @generated by protoc-gen-es v1.8.0 with parameter "target=ts,import_extension=.ts"
// @generated from file template.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.Template
 */
export class Template extends Message<Template> {
  /**
   * @generated from field: uint32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string ext = 3;
   */
  ext = "";

  /**
   * @generated from field: string path = 4;
   */
  path = "";

  /**
   * @generated from field: uint32 size = 5;
   */
  size = 0;

  /**
   * @generated from field: string thumbnail = 6;
   */
  thumbnail = "";

  /**
   * @generated from field: int64 createdAt = 7;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 updatedAt = 8;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<Template>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Template";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ext", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "createdAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "updatedAt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Template {
    return new Template().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJsonString(jsonString, options);
  }

  static equals(a: Template | PlainMessage<Template> | undefined, b: Template | PlainMessage<Template> | undefined): boolean {
    return proto3.util.equals(Template, a, b);
  }
}

/**
 * @generated from message proto.FileUploadResponse
 */
export class FileUploadResponse extends Message<FileUploadResponse> {
  /**
   * @generated from field: proto.Template template = 1;
   */
  template?: Template;

  constructor(data?: PartialMessage<FileUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.FileUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template", kind: "message", T: Template },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined, b: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined): boolean {
    return proto3.util.equals(FileUploadResponse, a, b);
  }
}

/**
 * @generated from message proto.GetTemplatesResponse
 */
export class GetTemplatesResponse extends Message<GetTemplatesResponse> {
  /**
   * @generated from field: repeated proto.Template templates = 1;
   */
  templates: Template[] = [];

  constructor(data?: PartialMessage<GetTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templates", kind: "message", T: Template, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTemplatesResponse {
    return new GetTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTemplatesResponse {
    return new GetTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTemplatesResponse {
    return new GetTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTemplatesResponse | PlainMessage<GetTemplatesResponse> | undefined, b: GetTemplatesResponse | PlainMessage<GetTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(GetTemplatesResponse, a, b);
  }
}

/**
 * @generated from message proto.UpdateTemplateRequest
 */
export class UpdateTemplateRequest extends Message<UpdateTemplateRequest> {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  constructor(data?: PartialMessage<UpdateTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTemplateRequest {
    return new UpdateTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTemplateRequest {
    return new UpdateTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTemplateRequest {
    return new UpdateTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTemplateRequest | PlainMessage<UpdateTemplateRequest> | undefined, b: UpdateTemplateRequest | PlainMessage<UpdateTemplateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTemplateRequest, a, b);
  }
}

/**
 * @generated from message proto.UpdateTemplateResponse
 */
export class UpdateTemplateResponse extends Message<UpdateTemplateResponse> {
  /**
   * @generated from field: proto.Template template = 1;
   */
  template?: Template;

  constructor(data?: PartialMessage<UpdateTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.UpdateTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template", kind: "message", T: Template },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTemplateResponse {
    return new UpdateTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTemplateResponse {
    return new UpdateTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTemplateResponse {
    return new UpdateTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTemplateResponse | PlainMessage<UpdateTemplateResponse> | undefined, b: UpdateTemplateResponse | PlainMessage<UpdateTemplateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTemplateResponse, a, b);
  }
}

