// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=.ts"
// @generated from file file_upload/v1/file_upload.proto (package file_upload.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message file_upload.v1.FileUploadRequest
 */
export class FileUploadRequest extends Message<FileUploadRequest> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  /**
   * @generated from field: bytes chunk = 2;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<FileUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file_upload.v1.FileUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileUploadRequest {
    return new FileUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileUploadRequest {
    return new FileUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileUploadRequest {
    return new FileUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FileUploadRequest | PlainMessage<FileUploadRequest> | undefined, b: FileUploadRequest | PlainMessage<FileUploadRequest> | undefined): boolean {
    return proto3.util.equals(FileUploadRequest, a, b);
  }
}

/**
 * @generated from message file_upload.v1.FileUploadResponse
 */
export class FileUploadResponse extends Message<FileUploadResponse> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName = "";

  /**
   * @generated from field: uint32 size = 2;
   */
  size = 0;

  constructor(data?: PartialMessage<FileUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file_upload.v1.FileUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined, b: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined): boolean {
    return proto3.util.equals(FileUploadResponse, a, b);
  }
}

