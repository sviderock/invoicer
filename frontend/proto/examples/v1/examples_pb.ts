// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=.ts"
// @generated from file examples/v1/examples.proto (package examples.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message examples.v1.Examples
 */
export class Examples extends Message<Examples> {
  /**
   * @generated from field: repeated examples.v1.Example examples = 1;
   */
  examples: Example[] = [];

  constructor(data?: PartialMessage<Examples>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "examples.v1.Examples";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "examples", kind: "message", T: Example, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Examples {
    return new Examples().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Examples {
    return new Examples().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Examples {
    return new Examples().fromJsonString(jsonString, options);
  }

  static equals(a: Examples | PlainMessage<Examples> | undefined, b: Examples | PlainMessage<Examples> | undefined): boolean {
    return proto3.util.equals(Examples, a, b);
  }
}

/**
 * @generated from message examples.v1.Example
 */
export class Example extends Message<Example> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Example>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "examples.v1.Example";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Example {
    return new Example().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJsonString(jsonString, options);
  }

  static equals(a: Example | PlainMessage<Example> | undefined, b: Example | PlainMessage<Example> | undefined): boolean {
    return proto3.util.equals(Example, a, b);
  }
}

/**
 * @generated from message examples.v1.IndexRequest
 */
export class IndexRequest extends Message<IndexRequest> {
  constructor(data?: PartialMessage<IndexRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "examples.v1.IndexRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexRequest {
    return new IndexRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexRequest {
    return new IndexRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexRequest {
    return new IndexRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IndexRequest | PlainMessage<IndexRequest> | undefined, b: IndexRequest | PlainMessage<IndexRequest> | undefined): boolean {
    return proto3.util.equals(IndexRequest, a, b);
  }
}

