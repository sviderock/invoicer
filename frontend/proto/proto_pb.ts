// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=.ts"
// @generated from file proto.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: uint32 size = 3;
   */
  size = 0;

  /**
   * @generated from field: string thumbnail = 4;
   */
  thumbnail = "";

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message proto.FileUploadResponse
 */
export class FileUploadResponse extends Message<FileUploadResponse> {
  /**
   * @generated from field: optional proto.File file = 1;
   */
  file?: File;

  constructor(data?: PartialMessage<FileUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.FileUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "message", T: File, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileUploadResponse {
    return new FileUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined, b: FileUploadResponse | PlainMessage<FileUploadResponse> | undefined): boolean {
    return proto3.util.equals(FileUploadResponse, a, b);
  }
}

/**
 * @generated from message proto.GetFilesResponse
 */
export class GetFilesResponse extends Message<GetFilesResponse> {
  /**
   * @generated from field: repeated proto.File files = 1;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<GetFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.GetFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFilesResponse {
    return new GetFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFilesResponse {
    return new GetFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFilesResponse {
    return new GetFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFilesResponse | PlainMessage<GetFilesResponse> | undefined, b: GetFilesResponse | PlainMessage<GetFilesResponse> | undefined): boolean {
    return proto3.util.equals(GetFilesResponse, a, b);
  }
}

/**
 * @generated from message proto.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  /**
   * @generated from field: int64 number = 1;
   */
  number = protoInt64.zero;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message proto.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: int64 number = 1;
   */
  number = protoInt64.zero;

  /**
   * @generated from field: string text = 2;
   */
  text = "";

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message proto.FailRequest
 */
export class FailRequest extends Message<FailRequest> {
  /**
   * @generated from field: int32 code = 1;
   */
  code = 0;

  constructor(data?: PartialMessage<FailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.FailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailRequest {
    return new FailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailRequest {
    return new FailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailRequest {
    return new FailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FailRequest | PlainMessage<FailRequest> | undefined, b: FailRequest | PlainMessage<FailRequest> | undefined): boolean {
    return proto3.util.equals(FailRequest, a, b);
  }
}

/**
 * @generated from message proto.FailResponse
 */
export class FailResponse extends Message<FailResponse> {
  constructor(data?: PartialMessage<FailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.FailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailResponse {
    return new FailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailResponse {
    return new FailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailResponse {
    return new FailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FailResponse | PlainMessage<FailResponse> | undefined, b: FailResponse | PlainMessage<FailResponse> | undefined): boolean {
    return proto3.util.equals(FailResponse, a, b);
  }
}

