// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: file_upload/v1/file_upload.proto

package file_uploadv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "invoice-manager/main/proto/file_upload/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileUploadServiceName is the fully-qualified name of the FileUploadService service.
	FileUploadServiceName = "file_upload.v1.FileUploadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileUploadServiceUploadFileProcedure is the fully-qualified name of the FileUploadService's
	// UploadFile RPC.
	FileUploadServiceUploadFileProcedure = "/file_upload.v1.FileUploadService/UploadFile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileUploadServiceServiceDescriptor          = v1.File_file_upload_v1_file_upload_proto.Services().ByName("FileUploadService")
	fileUploadServiceUploadFileMethodDescriptor = fileUploadServiceServiceDescriptor.Methods().ByName("UploadFile")
)

// FileUploadServiceClient is a client for the file_upload.v1.FileUploadService service.
type FileUploadServiceClient interface {
	UploadFile(context.Context) *connect.ClientStreamForClient[v1.FileUploadRequest, v1.FileUploadResponse]
}

// NewFileUploadServiceClient constructs a client for the file_upload.v1.FileUploadService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileUploadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileUploadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileUploadServiceClient{
		uploadFile: connect.NewClient[v1.FileUploadRequest, v1.FileUploadResponse](
			httpClient,
			baseURL+FileUploadServiceUploadFileProcedure,
			connect.WithSchema(fileUploadServiceUploadFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileUploadServiceClient implements FileUploadServiceClient.
type fileUploadServiceClient struct {
	uploadFile *connect.Client[v1.FileUploadRequest, v1.FileUploadResponse]
}

// UploadFile calls file_upload.v1.FileUploadService.UploadFile.
func (c *fileUploadServiceClient) UploadFile(ctx context.Context) *connect.ClientStreamForClient[v1.FileUploadRequest, v1.FileUploadResponse] {
	return c.uploadFile.CallClientStream(ctx)
}

// FileUploadServiceHandler is an implementation of the file_upload.v1.FileUploadService service.
type FileUploadServiceHandler interface {
	UploadFile(context.Context, *connect.ClientStream[v1.FileUploadRequest]) (*connect.Response[v1.FileUploadResponse], error)
}

// NewFileUploadServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileUploadServiceHandler(svc FileUploadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileUploadServiceUploadFileHandler := connect.NewClientStreamHandler(
		FileUploadServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(fileUploadServiceUploadFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/file_upload.v1.FileUploadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileUploadServiceUploadFileProcedure:
			fileUploadServiceUploadFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileUploadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileUploadServiceHandler struct{}

func (UnimplementedFileUploadServiceHandler) UploadFile(context.Context, *connect.ClientStream[v1.FileUploadRequest]) (*connect.Response[v1.FileUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("file_upload.v1.FileUploadService.UploadFile is not implemented"))
}
